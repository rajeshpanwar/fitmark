var ObjectID = require('mongodb').ObjectID;
function filterData(classRecord, instructor_id, next) {
    var data = {
        class_name: (classRecord.class_name) ? classRecord.class_name : undefined,
        class_start_time: (classRecord.class_start_time) ? classRecord.class_start_time : undefined,
        day: (classRecord.day && !isNaN(classRecord.day)) ? classRecord.day : undefined,
        latitude: (classRecord.latitude) ? classRecord.latitude : undefined,
        longitude: (classRecord.longitude) ? classRecord.longitude : undefined,
        duration: (classRecord.duration) ? classRecord.duration : undefined,
        cost: (classRecord.cost) ? classRecord.cost : undefined,
        description: (classRecord.description) ? classRecord.description : null,
        keywords: (classRecord.keywords) ? classRecord.keywords : null,
        limit_class_size: (classRecord.limit_class_size) ? classRecord.limit_class_size : undefined,
        additional_info: (classRecord.additional_info) ? classRecord.additional_info : null,
        created_on: new Date(),
        class_group_id: String(ObjectID()),
        instructor_id: String(instructor_id)
    };
    var weekly_repeat = 1;
    var error = false;
    for (var key in data) {
        if (data[key] === undefined) {
            error = true;
        }
    }
    if (error) {
        return next('Mandatory Parameters Missing', null)
    }
    if (classRecord.weekly_repeat && !isNaN(classRecord.weekly_repeat)) {
        weekly_repeat = parseInt(classRecord.weekly_repeat);
    }
    var year = new Date().getFullYear();
    var month = new Date().getMonth();
    var date = new Date().getDate();
    var schedule_date = new Date(year, month, date);
    var day1 = new Date().getDay();
    var day2 = parseInt(data.day);
    if (data.time_zone) {
        var time_zone = data.time_zone.split(':');
        schedule_date.setHours(new Date().getHours() + parseInt(time_zone[0]));
        if (time_zone.length > 1) {
            if (parseInt(time_zone[0]) < 0) {
                schedule_date.setMinutes(new Date().getMinutes() - 30);
            } else {
                schedule_date.setMinutes(new Date().getMinutes() + 30);
            }
        }
    }
    var day_diff = 0;
    if (day2 > day1) {
        day_diff = day2 - day1;
    }
    else if (day2 == day1) {
        day_diff = 0;
    } else {
        day_diff = (7 - day1) + day2
    }
    schedule_date.setDate(schedule_date.getDate() + day_diff);
    var time = data.class_start_time.split(':');
    schedule_date.setHours(new Date().getHours() + parseInt(time[0]));
    if (time.length > 1) {
        schedule_date.setMinutes(schedule_date.getMinutes() + parseInt(time[1]));
    }
    var modify_data = [];
    for (var i = 0; i < weekly_repeat; i++) {
        var data1 = JSON.parse(JSON.stringify(data));
        data1['schedule_date'] = schedule_date;
        modify_data.push(JSON.parse(JSON.stringify(data1)));
        schedule_date.setDate(schedule_date.getDate() + 7);
    }
    modify_data.forEach(function (data, index) {
        modify_data[index].schedule_date = new Date(data.schedule_date);
        modify_data[index].created_on = new Date(data.schedule_date);
    });
    next(null, modify_data);
}

function addInDatabase(req, records, next) {
    req.db.collection('nv.classes').insert(records, function (err, records) {
        if (err) throw err;
        next();
    });
}

function validateInstructorId(req, instructor_id, next) {
    var request = {
        entityName: 'nv.users',
        resourceId: instructor_id
    };
    req.app.get(request, function (err, result) {
        if (err || !result.data) {
            return next(false);
        }
        var data = result.data;
        var valid_user = false;
        if (data.role == 'instructor') {
            valid_user = true;
        }
        if (!data.available_roles) {
            data.available_roles = [];
        }
        if (data.available_roles.indexOf('instructor') > -1) {
            valid_user = true;
        }
        if (valid_user) {
            next(true);
        } else {
            next(false);
        }
    });
}

function getInstructorClasses(req, instructor_id, next) {
    var year = new Date().getFullYear();
    var month = new Date().getMonth();
    var date = new Date().getDate();
    var schedule_date = new Date(year, month, date);
    schedule_date.setDate(schedule_date.getDate() + 7);
    var filter = {'schedule_date': {$gt: new Date(), $lt: schedule_date}, 'instructor_id': instructor_id};
    req.db.collection('nv.classes').find(filter).toArray(function (err, result) {
        if (err || !result || !result.length) {
            return next(false);
        }
        next(result);
    })
}

function getClass(req, class_id, next) {
    try {
        class_id = ObjectID(class_id);
    } catch (e) {
        return next(false);
    }
    req.db.collection('nv.classes').findOne({'_id': class_id}, function (err, result) {
        if (err) throw err;
        if (!result || result.delete) {
            return next(false);
        }
        next(result);
    })
}

function updateClassInfo(req, class_record, modify_data, next) {
    if (modify_data.day) {
        var year = new Date().getFullYear();
        var month = new Date().getMonth();
        var date = new Date().getDate();
        var schedule_date = new Date(year, month, date);
        var day1 = new Date().getDay();
        var day2 = parseInt(modify_data.day);
        var day_diff = 0;
        if (day2 > day1) {
            day_diff = day2 - day1;
        } else {
            day_diff = (7 - day1) + day2
        }
        schedule_date.setDate(schedule_date.getDate() + day_diff);
        var time_zone = modify_data.time_zone.split(':');
        schedule_date.setHours(schedule_date.getHours() + parseInt(time_zone[0]));
        if (time_zone.length > 1) {
            if (parseInt(time_zone[0]) < 0) {
                schedule_date.setMinutes(schedule_date.getMinutes() - 30);
            } else {
                schedule_date.setMinutes(schedule_date.getMinutes() + 30);
            }
        }
    }
    if (modify_data.day) {
        var class_start_time = modify_data.class_start_time;
        if (!modify_data.class_start_time) {
            class_start_time = class_record.class_start_time;
        }
        var time = class_start_time.split(':');
        schedule_date.setHours(schedule_date.getHours() + parseInt(time[0]));
        if (time.length > 1) {
            schedule_date.setMinutes(schedule_date.getMinutes() + parseInt(time[1]));
        }
        modify_data['schedule_date'] = schedule_date;
    }
    for (var key in modify_data) {
        class_record[key] = modify_data[key];
    }
    class_record['updated_on'] = new Date();
    next(class_record);
}

function deleteClass(req, class_id, next) {
    req.db.collection('nv.classes').update({_id: ObjectID(class_id)}, {$set: {delete: true}}, function (err, result) {
        if (err) throw err;
        next();
    });
}

function deleteClassGroup(req, class_group_id, next) {
    req.db.collection('nv.classes').update({class_group_id: String(class_group_id)}, {$set: {delete: true}}, {multi: true}, function (err, result) {
        if (err) throw err;
        next();
    })
}

function updateInDatabase(req, class_id, record, next) {
    delete record._id;
    req.db.collection('nv.classes').update({'_id': ObjectID(class_id)}, {$set: record}, function (err, result) {
        if (err) throw err;
        next();
    });
}

function distance(lat1, lon1, lat2, lon2) {
    var p = 0.017453292519943295;    // Math.PI / 180
    var c = Math.cos;
    var a = 0.5 - c((lat2 - lat1) * p) / 2 +
        c(lat1 * p) * c(lat2 * p) *
        (1 - c((lon2 - lon1) * p)) / 2;

    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
}

function getFilterData(req, data, start, limit, next) {
    var year = new Date().getFullYear();
    var month = new Date().getMonth();
    var date = new Date().getDate();
    var schedule_date = new Date(year, month, date);
    schedule_date.setDate(schedule_date.getDate() + 7);
    var filter = {delete: {$exists: false}, 'schedule_date': {$gt: new Date(), $lt: schedule_date}};
    if (data.keywords) {
        filter['keywords'] = {$regex: data.keywords}
    }
    if (data.day && Array.isArray(data.day)) {
        filter['day'] = {$in: data.day};
    }
    req.db.collection('nv.classes').find(filter).skip(start).limit(limit).toArray(function (err, result) {
        if (err) throw err;
        var classes = [];
        result.forEach(function (r) {
            r.distance = parseInt(distance(data.latitude, data.longitude, r.latitude, r.longitude));
            classes.push(r);
        });
        var response = {
            start: start,
            limit: limit,
            records: classes
        };
        next(response);
    });
}

function getGymClasses(req, data, next) {
    var filter = {role: 'gym_owner'};
    if (data.day && Array.isArray(data.day)) {
        filter['schedule.schedule_day'] = {$in: data.day};
    }
    req.db.collection('nv.users').find(filter).toArray(function (err, result) {
        if (err) throw err;
        var classes = [];
        result.forEach(function (r) {
            if (r.latitude && r.longitude) {
                r.distance = parseInt(distance(data.latitude, data.longitude, r.latitude, r.longitude));
                classes.push(r);
            }
        });
        next(classes);
    })
}

function getInstructorInfo(req, instructor_id, next) {
    req.db.collection('nv.users').findOne({_id: ObjectID(instructor_id)}, function (err, user_info) {
        if (err) throw err;
        next(user_info);
    })
}

function pushInstructorInfo(req, classes, next) {
    var instructor_info = {};
    var modify_classes = [];
    var split_classes = function (classes, next) {
        if (!classes.length) {
            return next();
        }
        var class_info = classes.shift();
        if (instructor_info[class_info.instructor_id]) {
            class_info['instructor'] = instructor_info[class_info.instructor_id];
            modify_classes.push(class_info);
            return split_classes(classes, next);
        }
        getInstructorInfo(req, class_info.instructor_id, function (instructor) {
            instructor_info[class_info.instructor_id] = instructor;
            class_info['instructor'] = instructor_info[class_info.instructor_id];
            modify_classes.push(class_info);
            return split_classes(classes, next);
        })
    };
    split_classes(classes, function () {
        next(modify_classes);
    })
}

function getUserInformation(req, attendees, next) {
    var attendees_info = [];
    var getAttendeeInfo = function (attendee, next) {
        var request = {
            entityName: 'nv.users',
            resourceId: attendee.user_id,
            executeHooks: true
        };
        req.app.get(request, function (err, response) {
            if (err || !response.data) {
                return next();
            }
            attendee.user_info = response.data;
            attendees_info.push(attendee);
            next();
        })
    };
    var split_attendees = function (attendees, next) {
        if (!attendees.length) {
            return next();
        }
        var attendee = attendees.shift();
        getAttendeeInfo(attendee, function (attendee_info) {
            split_attendees(attendees, next);
        })
    };
    split_attendees(attendees, function () {
        next(attendees_info);
    })
}

function validateUser(req, user_id, next) {
    try {
        user_id = ObjectID(user_id);
    } catch (e) {
        return next(false);
    }
    req.db.collection('nv.users').findOne({_id: user_id}, function (err, user) {
        if (err) throw err;
        if (!user) {
            return next(false);
        }
        var valid = false;
        if (user.role == 'fitness_user') {
            valid = true;
        }
        if (user.roles.indexOf('fitness_user') > -1) {
            valid = true;
        }
        if (!valid) {
            return next(false);
        }
        next(true);
    })
}

function insertInTransaction(req, data, classs, next) {
    var request = {
        discount_amount: 0,
        coupon_code: null,
        payment_type: 'online',
        user_id: data.user_id,
        amount: classs.cost,
        payment_info: data.payment_info
    };
    req.db.collection('nv.payment').insert(request, function (err, transaction) {
        if (err) throw err;
        next(transaction[0]._id);
    });
}

function payment(req, payment_method_nonce, info, next) {
    var braintree = require("braintree");
    var gateway = braintree.connect({
        environment: braintree.Environment.Sandbox,
        merchantId: "q2zcqn479qdbc7pz",
        publicKey: "4pzkzrvy7b4qbytc",
        privateKey: "52940194946084c94e0ba8732231f1b4"
    });
    gateway.transaction.sale({
        amount: info.cost,
        paymentMethodNonce: payment_method_nonce,
        options: {
            submitForSettlement: true
        }
    }, function (err, result) {
        if (err || !result.success) {
            return next(null);
        }
        next(result.transaction);
    });
}

function insertInBookingTable(req, data, transaction_id, classs, next) {
    var request = {
        payment_id: transaction_id,
        access_key: require('short-mongo-id')(transaction_id) + Math.floor(Math.random() * 1000),
        class_id: data.class_id,
        isCancel: false,
        instructor_id: classs.instructor_id,
        class_group_id: data.class_group_id,
        user_id: data.user_id,
        class_info: classs,
        payment: true,
        payment_info: data.payment_info,
        created_on: new Date()
    };
    req.db.collection('nv.booking').insert(request, function (err, result) {
        next(result[0]);
    });
}

function checkDuplicateClass(req, data, next) {
    var request = {
        class_id: data.class_id,
        user_id: data.user_id
    };
    req.db.collection('nv.booking').findOne(request, function (err, result) {
        if (err || !result) {
            return next(false);
        }
        next(true);
    })
}

function getClassesInfo(req, class_group_id, next) {
    req.db.collection('nv.classes').find({
        class_group_id: String(class_group_id),
        delete: {$exists: false}
    }).toArray(function (err, classes) {
        if (err) {
            throw err;
        }
        if (!classes || !classes.length) {
            return next(false);
        }
        next(classes);
    })
}

function insertRecordsInBookingTable(req, data, classes, transaction_id, next) {
    var records = [];
    classes.forEach(function (classs) {
        var request = {};
        if (String(classs._id) == data.class_id) {
            request = {
                payment_id: transaction_id,
                access_key: require('short-mongo-id')(transaction_id) + Math.floor(Math.random() * 1000),
                class_id: data.class_id,
                user_id: data.user_id,
                class_info: classs,
                isCancel: false,
                instructor_id: classs.instructor_id,
                class_group_id: data.class_group_id,
                payment: true,
                payment_info: data.payment_info,
                created_on: new Date()
            };
            records.push(request);
        } else {
            request = {
                access_key: require('short-mongo-id')(transaction_id) + Math.floor(Math.random() * 1000),
                class_id: data.class_id,
                user_id: data.user_id,
                class_info: classs,
                isCancel: false,
                class_group_id: data.class_group_id,
                instructor_id: classs.instructor_id,
                created_on: new Date()
            };
            records.push(request);
        }
    });
    req.db.collection('nv.booking').insert(records, function (err, result) {
        if (err) throw err;
        next(result);
    });
}

function getUserClasses(req, user_id, next) {
    var date = new Date();
    date = new Date(date.setDate(date.getDate() + 7));
    req.db.collection('nv.booking').find({
        'class_info.schedule_date': {$gt: new Date(), $lt: date},
        'user_id': user_id
    }).toArray(function (err, classes) {
        if (err) throw err;
        next(classes);
    });
}

function verifyGymClass(req, data1, next) {
    var request = {
        entityName: 'nv.users',
        resourceId: data1.gym_id
    };
    req.app.get(request, function (err, result) {
        if (err || !result.data) {
            return next(false);
        }
        var data = result.data;
        var valid_user = false;
        if (data.role == 'gym_owner') {
            valid_user = true;
        }
        if (valid_user) {
            var date = new Date();
            if (data1.time_zone) {
                var time_zone = data1.time_zone.split(':');
                date.setHours(new Date().getHours() + parseInt(time_zone[0]));
                if (time_zone.length > 1) {
                    if (parseInt(time_zone[0]) < 0) {
                        date.setMinutes(new Date().getMinutes() - 30);
                    } else {
                        date.setMinutes(new Date().getMinutes() + 30);
                    }
                }
            }
            if (!data.schedule || !data.schedule.length) {
                return next(false);
            }
            var valid_date = date.getDay();
            var next_valid_date;
            if (valid_date == 6) {
                next_valid_date = 0
            } else {
                next_valid_date = valid_date + 1
            }
            var valid_gym_register = false;
            data.schedule.forEach(function (sch) {
                if (sch.schedule_day && (sch.schedule_day.indexOf(String(valid_date)) > -1 || sch.schedule_day.indexOf(String(next_valid_date)) > -1)) {
                    valid_gym_register = true;
                }
            });

            if (!valid_gym_register) {
                return next(false);
            }
            var valid_till = new Date(date.setHours(date.getHours() + 24));
            data.valid_till = valid_till;
            next(data);
        } else {
            next(false);
        }
    })
}

function insertInGymRegisterTable(req, data, gym_info, transaction_id, next) {
    var request = {
        payment_id: transaction_id,
        access_key: require('short-mongo-id')(transaction_id) + Math.floor(Math.random() * 1000),
        gym_id: data.gym_id,
        isCancel: false,
        user_id: data.user_id,
        gym_info: gym_info,
        valid_till: gym_info.valid_till,
        payment: true,
        payment_info: data.payment_info,
        created_on: new Date()
    };
    req.db.collection('nv.gym_registration').insert(request, function (err, result) {
        if (err) throw err;
        next(result[0]);
    })
}

function checkDuplicateGymClass(req, data, next) {
    var request = {
        gym_id: data.gym_id,
        user_id: data.user_id
    };
    var date = new Date();
    if (data.time_zone) {
        var time_zone = data.time_zone.split(':');
        date.setHours(new Date().getHours() + parseInt(time_zone[0]));
        if (time_zone.length > 1) {
            if (parseInt(time_zone[0]) < 0) {
                date.setMinutes(new Date().getMinutes() - 30);
            } else {
                date.setMinutes(new Date().getMinutes() + 30);
            }
        }
    }
    request['valid_till'] = {$gte: new Date(date)};
    req.db.collection('nv.gym_registration').findOne(request, function (err, response) {
        if (err || !response) {
            return next(false);
        }
        next(true);
    })
}

function getAllGymClassesByUser(req, data, next) {
    var date = new Date();
    if (data.time_zone) {
        var time_zone = data.time_zone.split(':');
        date.setHours(new Date().getHours() + parseInt(time_zone[0]));
        if (time_zone.length > 1) {
            if (parseInt(time_zone[0]) < 0) {
                date.setMinutes(new Date().getMinutes() - 30);
            } else {
                date.setMinutes(new Date().getMinutes() + 30);
            }
        }
    }
    req.db.collection('nv.gym_registration').find({
        user_id: data.user_id,
        valid_till: {$gt: date}
    }).toArray(function (err, result) {
        if (err) throw err;
        next(result);
    })
}

function getAllAttendeesForGym(req, data, next) {
    var date = new Date();
    if (data.time_zone) {
        var time_zone = data.time_zone.split(':');
        date.setHours(new Date().getHours() + parseInt(time_zone[0]));
        if (time_zone.length > 1) {
            if (parseInt(time_zone[0]) < 0) {
                date.setMinutes(new Date().getMinutes() - 30);
            } else {
                date.setMinutes(new Date().getMinutes() + 30);
            }
        }
    }
    req.db.collection('nv.gym_registration').find({
        gym_id: data.gym_id,
        valid_till: {$gt: date}
    }).toArray(function (err, result) {
        if (err) throw err;
        next(result);
    })
}

function getAttendeesInfo(req, class_id, next) {
    var request = {
        class_id: class_id,
        payment: true
    };
    req.db.collection('nv.booking').find(request).toArray(function (err, result) {
        if (err) throw err;
        next(result);
    })
}

function getDistinctUser(req, gym_id, next) {
    req.db.collection('nv.gym_registration').distinct('user_id', {
        gym_id: gym_id,
        created_on: {$lte: new Date()}
    }, function (err, response) {
        next(response);
    })
}

function getDistinctUserFromInstructor(req, instructor_id, next) {
    req.db.collection('nv.booking').distinct('user_id', {
        instructor_id: instructor_id,
        payment: true,
        created_on: {$lte: new Date()}
    }, function (err, response) {
        next(response);
    });
}

function getUniqueInstructor(req, user_id, next) {
    req.db.collection('nv.booking').distinct('instructor_id', {
        user_id: user_id,
        payment: true,
        created_on: {$lte: new Date()}
    }, function (err, response) {
        next(response);
    })
}

function getUniqueGym(req, user_id, next) {
    req.db.collection('nv.gym_registration').distinct('gym_id', {
        user_id: user_id,
        created_on: {$lte: new Date()}
    }, function (err, response) {
        next(response);
    })
}

function getUserInfo(req, users, next) {
    var users_id = [];
    users.forEach(function (user) {
        users_id.push(ObjectID(user));
    });
    req.db.collection('nv.users').find({_id: {$in: users_id}}).toArray(function (err, response) {
        next(response);
    })
}

exports.addClass = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id || !data.classRecord) {
        return res.error(404, 'Missing mandatory fields');
    }
    validateInstructorId(req, data.instructor_id, function (exists) {
        if (!exists) {
            return res.error(406, 'Invalid Instructor');
        }
        filterData(data.classRecord, data.instructor_id, function (err, data) {
            if (err) {
                return res.error(404, err);
            }
            addInDatabase(req, data, function () {
                return res.send(200, {data: data});
            })
        })
    })
};

exports.updateClass = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id || !data.class_id || !data.data) {
        return res.error(404, 'Missing mandatory fields');
    }
    if (data.data['day']) {
        if (!data.data['time_zone']) {
            data.data['time_zone'] = '0';
        }
    }
    getClass(req, data.class_id, function (class_result) {
        if (!class_result) {
            return res.error(406, 'No Class found with given Id');
        }
        updateClassInfo(req, class_result, data.data, function (updated_record) {
            updateInDatabase(req, data.class_id, updated_record, function () {
                res.send(200, {data: 'Updated SuccessFully'});
            })
        })
    })
};

exports.getAllClasses = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getInstructorClasses(req, data.instructor_id, function (classes) {
        if (!classes) {
            return res.error(404, 'No Class is schedule for given instructor');
        }
        var new_classes = [];
        classes.forEach(function (classs, index) {
            if (!classs.delete) {
                new_classes.push(classs);
            }
        });
        res.send(200, {data: new_classes});
    })
};

exports.getAllAttendees = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.class_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getAttendeesInfo(req, data.class_id, function (attendees) {
        getUserInformation(req, attendees, function (attendees_info) {
            return res.send(200, {data: attendees_info});
        })
    })
};

exports.deleteClass = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id || !data.class_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    deleteClass(req, data.class_id, function () {
        res.send(200, {data: 'Deleted SuccessFully'});
    });
};

exports.deleteClassGroup = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id || !data.class_group_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    deleteClassGroup(req, data.class_group_id, function () {
        res.send(200, {data: 'Deleted SuccessFully'});

    })
};

exports.getClasses = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var start = 0;
    var limit = 50;
    if (req.query) {
        if (req.query.start) {
            start = req.query.start;
        }
        if (req.query.limit) {
            limit = req.query.limit;
        }
    }
    var data = req.data;
    if (!data.latitude || !data.longitude) {
        return res.error(404, 'Missing mandatory fields');
    }
    var radius = 40;
    if (data.radius && !isNaN(data.radius)) {
        radius = parseInt(data.radius);
    }
    getFilterData(req, data, start, limit, function (response) {
        var classes = response.records;
        var modify_classes = [];
        classes.forEach(function (cl) {
            if (cl.distance <= radius) {
                modify_classes.push(cl);
            }
        });
        pushInstructorInfo(req, modify_classes, function (classes) {
            getGymClasses(req, data, function (gym_classes) {
                var modify_gym_classes = [];
                gym_classes.forEach(function (cl) {
                    if (cl.distance <= radius) {
                        modify_gym_classes.push(cl);
                    }
                });
                var records = {
                    gym: modify_gym_classes,
                    classes: classes
                };
                response.records = records;
                return res.send(200, {data: response});
            });
        })
    })
};

exports.bookClasses = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.class_id || !data.class_group_id || !data.user_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    var isRepeat = false;
    if (data.isRepeat && (data.isRepeat == true || data.isRepeat == 'true')) {
        isRepeat = true;
    }
    if (!isRepeat) {
        getClass(req, data.class_id, function (classs) {
            if (!classs) {
                return res.error(406, 'Invalid class id');
            }
            if (!classs.class_group_id || String(classs.class_group_id) != String(data.class_group_id)) {
                return res.error(406, 'Invalid class group id');
            }
            validateUser(req, data.user_id, function (valid) {
                if (!valid) {
                    return res.error(406, 'Invalid User');
                }
                checkDuplicateClass(req, data, function (exists) {
                    if (exists) {
                        return res.send(200, {data: 'Error # Duplicate Record'});
                    }
                    payment(req, data.payment_method_nonce, classs, function (payment_info) {
                        if (!payment_info) {
                            return res.send(200, {data: 'Error # Payment Failure'});
                        }
                        data.payment_info = payment_info;
                        insertInTransaction(req, data, classs, function (transaction_id) {
                            insertInBookingTable(req, data, transaction_id, classs, function (response) {
                                res.send(200, {data: 'Success # Booked Successfully'});
                            })
                        })
                    })
                });
            })
        })
    } else {
        getClassesInfo(req, data.class_group_id, function (classes) {
            if (!classes) {
                return res.error(406, 'Invalid class group id');
            }
            var valid_class = false;
            var payment_class = {};
            classes.forEach(function (classs) {
                if (String(classs._id) == data.class_id) {
                    valid_class = true;
                    payment_class = classs;
                }
            });
            if (!valid_class) {
                return res.error(406, 'Invalid class id');
            }
            validateUser(req, data.user_id, function (valid) {
                if (!valid) {
                    return res.error(406, 'Invalid User');
                }
                checkDuplicateClass(req, data, function (exists) {
                    if (exists) {
                        return res.send(200, {data: 'Error # Duplicate Record'});
                    }
                    payment(req, data.payment_method_nonce, payment_class, function (payment_info) {
                        if (!payment_info) {
                            return res.send(200, {data: 'Error # Payment Failure'});
                        }
                        data.payment_info = payment_info;
                        insertInTransaction(req, data, payment_class, function (transaction_id) {
                            insertRecordsInBookingTable(req, data, classes, transaction_id, function (response) {
                                res.send(200, {data: 'Success # Booked Successfully'});
                            })
                        })
                    })
                })
            })
        })
    }
};

exports.getAllUserClasses = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.user_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getUserClasses(req, data.user_id, function (classes) {
        res.send(200, {data: classes});
    })
};

exports.gym_register = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.user_id || !data.gym_id || !data.payment_method_nonce) {
        return res.error(404, 'Missing mandatory fields');
    }
    verifyGymClass(req, data, function (gym_info) {
        if (!gym_info) {
            return res.error(406, 'Invalid Gym');
        }
        validateUser(req, data.user_id, function (valid) {
            if (!valid) {
                return res.error(406, 'Invalid User');
            }
            checkDuplicateGymClass(req, data, function (exists) {
                if (exists) {
                    return res.send(200, {data: 'Error # Duplicate Record'});
                }
                payment(req, data.payment_method_nonce, gym_info, function (payment_info) {
                    if (!payment_info) {
                        return res.send(200, {data: 'Error # Payment Failure'});
                    }
                    data.payment_info = payment_info;
                    insertInTransaction(req, data, gym_info, function (transaction_id) {
                        insertInGymRegisterTable(req, data, gym_info, transaction_id, function (response) {
                            res.send(200, {data: 'Success # Booked Successfully'});
                        })
                    })
                });
            })
        })
    })
};

exports.getAllGymClasses = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.user_id || !data.time_zone) {
        return res.error(404, 'Missing mandatory fields');
    }
    getAllGymClassesByUser(req, data, function (classes) {
        res.send(200, {data: classes});
    })
};

exports.getAllAttendeesForGym = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.gym_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getAllAttendeesForGym(req, data, function (classes) {
        getUserInformation(req, classes, function (attendees_info) {
            var modify_attendees_info = [];
            attendees_info.forEach(function (attendees) {
                delete attendees.gym_info;
                modify_attendees_info.push(attendees);
            });
            return res.send(200, {data: modify_attendees_info});
        });
    })
};

exports.payout = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    var date = new Date().getDate();
    var date_diff = 0;
    if (date > 15) {
        date_diff = date - 15;
    } else {
        date_diff = 15 - date;
    }
    var schedule_date = new Date();
    schedule_date.setDate(schedule_date.getDate() - date_diff);
    console.log(schedule_date);
    if (data.instructor_id) {
        var filter = {
            'instructor_id': data.instructor_id,
            'created_on': {$gt: schedule_date},
            payment: true
        };
        req.db.collection('nv.booking').find(filter).toArray(function (err, result) {
            if (err || !result || !result.length) {
                return res.send(200, {data: {payout: 0}})
            }
            var total = 0;
            result.forEach(function (class_info) {
                total += parseFloat(class_info.class_info.cost);
            });
            return res.send(200, {data: {payout: total}})
        })
    } else if (data.gym_id) {
        var filter = {
            'gym_id': data.gym_id,
            'created_on': {$gt: schedule_date},
            payment: true
        };
        req.db.collection('nv.gym_registration').find(filter).toArray(function (err, result) {
            if (err || !result || !result.length) {
                return res.send(200, {data: {payout: 0}})
            }
            var total = 0;
            result.forEach(function (class_info) {
                total += parseFloat(class_info.class_info.cost);
            });
            return res.send(200, {data: {payout: total}})
        })
    } else {
        return res.error(404, 'Mandatory parameters are missing');
    }
};

exports.gym_history = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.gym_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getDistinctUser(req, data.gym_id, function (users) {
        if (!users.length) {
            return res.send(200, {data: []});
        }
        getUserInfo(req, users, function (user_info) {
            res.send(200, {data: user_info});
        })
    })
};

exports.instructor_history = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.instructor_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getDistinctUserFromInstructor(req, data.instructor_id, function (users) {
        if (!users.length) {
            return res.send(200, {data: []});
        }
        getUserInfo(req, users, function (user_info) {
            res.send(200, {data: user_info});
        })
    })
};

exports.user_history_for_instructor = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.user_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getUniqueInstructor(req, data.user_id, function (users) {
        if (!users.length) {
            return res.send(200, {data: []});
        }
        getUserInfo(req, users, function (user_info) {
            res.send(200, {data: user_info});
        })
    })
};

exports.user_history_for_gym = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var data = req.data;
    if (!data.user_id) {
        return res.error(404, 'Missing mandatory fields');
    }
    getUniqueGym(req, data.user_id, function (users) {
        if (!users.length) {
            return res.send(200, {data: []});
        }
        getUserInfo(req, users, function (user_info) {
            res.send(200, {data: user_info});
        })
    })
};

exports.sendEnquiry = function (req, res, next) {
    var nodemailer = require('nodemailer');

// create reusable transporter object using the default SMTP transport
    var transporter = nodemailer.createTransport('smtps://ffitmark@gmail.com:fitmark@@smtp.gmail.com');

// setup e-mail data with unicode symbols
    var data = req.data;
    var mailOptions = {
        from: '"Fitmark" <ffitmark@gmail.com>', // sender address
        to: 'ffitmark@gmail.com', // list of receivers
        subject: 'Enquiry Mail', // Subject line
        html: data.message + '<br><b>Name: </b>' + data.name + '<br><b>Email: </b>' + data.email
    };

// send mail with defined transport object
    transporter.sendMail(mailOptions, function (error, info) {
        next();
    });
};