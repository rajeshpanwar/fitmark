var bcrypt = require('bcrypt');
var passport = require('passport');
var ObjectID = require('mongodb').ObjectID;
var validator = require("email-validator");
var mandatory_fields = ['name', 'email', 'phone', 'password'];
var roles = ['gym_owner', 'fitness_user', 'instructor'];
var checkFacebookId = function (req, user, next) {
    if (req.query && req.query.skipUserExists) {
        return next(null, false);
    }
    var request = {
        entityName: 'nv.users',
        query: {
            filters: [{field: 'facebook_id', value: user.facebook_id, operator: 'equal'}]
        }
    };
    req.app.list(request, function (err, result) {
        if (err) {
            return next(err, null);
        }
        var data = result.data.records;
        if (data.length) {
            if (!data[0].roles) {
                data[0].roles = [];
            }
            if (data[0].roles.indexOf(user.role) == -1 && data[0].role != user.role) {
                return next('Invalid role', data[0]);
            }
            next(null, data[0]);
        } else {
            next(null, false);
        }
    })
};

var validateEmail = function (email, next) {
    var valid = validator.validate(email);
    if (valid) {
        return next(true);
    } else {
        next(false);
    }
};

var comparePassword = function (password1, password2, next) {
    bcrypt.compare(password1, password2, function (err, isMatch) {
        if (err || !isMatch) {
            return next(false);
        }
        next(true);
    })
};

var encrypt = function (user, next) {
    bcrypt.genSalt(10, function (err, salt) {
        if (err) {
            return next('Issue in encryption', null);
        }
        bcrypt.hash(user.password, salt, function (err, hash) {
            if (err) {
                return next('Issue in encryption', null);
            }
            user.password = hash;
            next(err, user);
        });
    });
};

var addUser = function (req, user, next) {
    if (!user.roles) {
        user.roles = [];
    }
    user.roles.push(user.role);
    var request = {
        entityName: 'nv.users',
        data: user
    };
    req.app.add(request, function (err, result) {
        if (err) {
            return next(err, null);
        }
        next(null, result.data);
    })
};

var checkUserExists = function (req, user, next) {
    if (req.query && req.query.skipUserExists) {
        return next(null, false);
    }
    var request = {
        entityName: 'nv.users',
        query: {
            filters: [{field: 'email', value: user.email, operator: 'equal'}]
        }
    };
    req.app.list(request, function (err, result) {
        if (err) {
            return next(err, null);
        }
        var data = result.data.records;
        if (data.length) {
            if (data[0].role != user.role) {
                return next('Invalid Role', null);
            }
            return next(null, data[0]);
        }
        next(null, false);
    });
};

var checkUserExistsNew = function (req, user, next) {
    if (req.query && req.query.skipUserExists) {
        return next(null, false);
    }
    var request = {
        entityName: 'nv.users',
        query: {
            filters: [{field: 'email', value: user.email, operator: 'equal'}]
        }
    };
    req.app.list(request, function (err, result) {
        if (err) {
            return next(err, null);
        }
        var data = result.data.records;
        if (data.length) {
            if (data[0].role != user.role) {
                return next('Invalid Role', data[0]);
            }
            return next(null, data[0]);
        }
        next(null, false);
    });
};

var filterUserData = function (user) {
    var userData = {};
    userData.isLoggedIn = true;
    userData._id = String(user._id);
    userData.first_name = user.first_name;
    userData.last_name = user.last_name;
    userData.email = user.email;
    userData.phone = user.phone;
    userData.gender = user.gender;
    userData.address = user.address;
    userData.name = user.name;
    userData.role = user.role;
    userData.image = (user.image && user.image.data) ? user.image.data : null;
    userData.facebook_id = user.facebook_id;
    userData.description = user.description;
    userData.payout_method = user.payout_method;
    userData.created_on = user.created_on;
    userData.updated_on = user.updated_on;
    userData.available_roles = user.roles;
    userData.schedule = user.schedule;
    userData.cost = user.cost_per_session;
    userData.verified = user.verified;
    for (var key in userData) {
        if (!userData[key]) {
            delete userData[key];
        }
    }
    return userData;
};

var sendNotification = function (req, user, next) {
    //For sending notification in future
    next();
};

exports.login = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var onlyLogin = false;
    if (req.query && req.query.login == 'true') {
        onlyLogin = true;
    }
    var user = req.data;
    if (!user.email || !user.password) {
        return res.error(404, 'Mandatory fields are missing');
    }
    if (!user.role) {
        user.role = 'fitness_user';
    }
    if (roles.indexOf(user.role) == -1) {
        return res.error(406, 'Invalid Role');
    }
    validateEmail(user.email, function (valid) {
        if (!valid) {
            return res.error(406, 'Invalid Email Id');
        }
        checkUserExists(req, user, function (err, user1) {
            if (err) {
                return res.error(404, 'Error in getting user information');
            }
            if (user1) {
                comparePassword(user.password, user1.password, function (isMatch) {
                    if (!isMatch) {
                        return res.error(401, 'Password is incorrect');
                    }
                    req.session.user = filterUserData(user1);
                    res.send(200, {data: filterUserData(user1)});
                })
            } else if (onlyLogin) {
                return res.error(406, 'Invalid User');
            } else {
                if (!req.query) {
                    req.query = {};
                }
                req.query['skipUserExists'] = true;
                exports.register(req, res, next);
            }
        });
    })
};

exports.login_new = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var onlyLogin = false;
    if (req.query && req.query.login == 'true') {
        onlyLogin = true;
    }
    var user = req.data;
    if (!user.role) {
        user.role = 'fitness_user';
    }
    if (roles.indexOf(user.role) == -1) {
        return res.error(406, 'Invalid Role');
    }
    if (user.role == 'fitness_user' || user.role == 'instructor') {
        if (!user.facebook_id) {
            return res.error(404, 'Mandatory fields are missing');
        }
        checkFacebookId(req, user, function (err, user1) {
            if (err && !user1) {
                return res.error(406, err);
            }
            if (!err && user1) {
                user1.role = user.role;
                var filter_user = filterUserData(user1);
                filter_user['status'] = 'existing';
                req.session.user = filter_user;
                res.send(200, {data: filter_user});
            } else if (onlyLogin) {
                res.error(406, 'Facebook Id is incorrect');
            } else if (err && user1) {
                if (!user1.roles) {
                    user1.roles = [];
                    user1.roles.push(user1.role);
                }
                user1.roles.push(user.role);
                var request = {
                    entityName: 'nv.users',
                    resourceId: String(user1._id),
                    data: user1
                };
                req.app.update(request, function (err, result) {
                    if (err) {
                        return res.error(406, err);
                    }
                    var user_data = result.data.data;
                    user_data.role = user.role;
                    var user2 = filterUserData(user_data);
                    user2['status'] = 'new';
                    req.session.user = user2;
                    res.send(200, {data: user2});
                });
            } else {
                var request = {
                    entityName: 'nv.users',
                    query: {
                        skipUserExists: true
                    },
                    data: user
                };
                req.app.call('register_new', request, function (err, result) {
                    if (err) {
                        return res.error(406, err);
                    }
                    var user = result.data.data;
                    user['status'] = 'new';
                    req.session.user = user;
                    res.send(200, {data: user});
                });
            }
        })
    }
    else {
        if (!user.email || !user.password) {
            return res.error(404, 'Mandatory fields are missing');
        }
        validateEmail(user.email, function (valid) {
            if (!valid) {
                return res.error(406, 'Invalid Email Id');
            }
            checkUserExistsNew(req, user, function (err, user1) {
                if (err) {
                    return res.error(404, err);
                }
                if (user1) {
                    comparePassword(user.password, user1.password, function (isMatch) {
                        if (!isMatch) {
                            return res.error(401, 'Password is incorrect');
                        }
                        var filter_user = filterUserData(user1);
                        filter_user['status'] = 'existing';
                        req.session.user = filter_user;
                        res.send(200, {data: filter_user});
                    })
                } else if (onlyLogin) {
                    return res.error(406, 'Invalid User');
                } else {
                    var request = {
                        entityName: 'nv.users',
                        query: {
                            skipUserExists: true
                        },
                        data: user
                    };
                    req.app.call('register_new', request, function (err, result) {
                        if (err) {
                            return res.error(406, err.data);
                        }
                        var user = result.data.data;
                        user['status'] = 'new';
                        res.send(200, {data: user});
                    });
                }
            });
        })
    }

};

exports.isLoggedIn = function (req, res, next) {
    if (req.session.user && req.session.user.isLoggedIn) {
        res.send(200, req.session.user);
    }
    else {
        res.error(404);
    }
};

exports.register = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var user = req.data;
    mandatory_fields.forEach(function (field) {
        if (!user[field]) {
            return res.error(404, 'mandatory fields not found');
        }
    });
    if (!user.role) {
        user.role = 'fitness_user';
    }
    if (roles.indexOf(user.role) == -1) {
        return res.error(406, 'Invalid Role');
    }
    validateEmail(user.email, function (valid) {
        if (!valid) {
            return res.error(406, 'Invalid Email Id');
        }
        checkUserExists(req, user, function (err, exists) {
            if (err) {
                return res.error(404, err);
            }
            if (exists) {
                return res.error(404, 'Email Id already exists');
            }
            encrypt(user, function (err, user) {
                if (err) {
                    return res.error(406, err);
                }
                addUser(req, user, function (err, user) {
                    if (err) {
                        return res.error(404, 'Error in adding user');
                    }
                    sendNotification(req, user, function () {
                        req.session.user = filterUserData(user);
                        res.send(200, {data: filterUserData(user)});
                    })
                })
            })
        })
    });
};

exports.register_new = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    var user = req.data;
    if (!user.role) {
        user.role = 'fitness_user';
    }
    if (roles.indexOf(user.role) == -1) {
        return res.error(406, 'Invalid Role');
    }
    if (user.role == 'fitness_user' || user.role == 'instructor') {
        if (!user.facebook_id) {
            return res.error(404, 'Mandatory fields are missing');
        }
        checkFacebookId(req, user, function (err, user1) {
            if (err && !user1) {
                return res.error(406, err);
            }
            if (!err && user1) {
                res.error(409, 'Facebook Id Already exists');
            } else if (err && user1) {
                if (!user1.roles) {
                    user1.roles = [];
                    user1.roles.push(user1.role);
                }
                user1.roles.push(user.role);
                var request = {
                    entityName: 'nv.users',
                    resourceId: String(user1._id),
                    data: user1
                };
                req.app.update(request, function (err, result) {
                    if (err) {
                        return res.error(406, err);
                    }
                    var user_data = result.data.data;
                    user_data.role = user.role;
                    var user2 = filterUserData(user_data);
                    user2['status'] = 'new';
                    res.send(200, {data: user2});
                });
            } else {
                addUser(req, user, function (err, user) {
                    if (err) {
                        return res.error(404, 'Error in adding user');
                    }
                    user['status'] = 'new';
                    req.session.user = filterUserData(user);
                    sendNotification(req, user, function () {
                        res.send(200, {data: filterUserData(user)});
                    })
                })
            }
        })
    } else {
        var mandatory_parameters = false;
        mandatory_fields.forEach(function (field) {
            if (!user[field]) {
                mandatory_parameters = true;
            }
        });
        if (mandatory_parameters) {
            return res.error(404, 'mandatory fields not found');
        }
        validateEmail(user.email, function (valid) {
            if (!valid) {
                return res.error(406, 'Invalid Email Id');
            }
            checkUserExistsNew(req, user, function (err, exists) {
                if (err) {
                    return res.error(406, 'User Already exists with different role');
                }
                if (exists) {
                    return res.error(409, 'Email Id already exists');
                }
                encrypt(user, function (err, user) {
                    if (err) {
                        return res.error(406, err);
                    }
                    addUser(req, user, function (err, user) {
                        if (err) {
                            return res.error(406, 'Error in adding user');
                        }
                        user['status'] = 'new';
                        req.session.user = filterUserData(user);
                        sendNotification(req, user, function () {
                            res.send(200, {data: filterUserData(user)});
                        })
                    })
                })
            })
        });
    }
};

exports.logout = function (req, res, next) {
    if (req.session.user && req.session.user.isLoggedIn) {
        req.session.user = {isLoggedIn: false};
        res.send(200);
    } else {
        res.error(404);
    }
};

exports.verifyUser = function (req, res, next) {
    if (!req.data) {
        return res.error(404, 'data not found');
    }
    if (req.data.email) {
        checkUserExistsNew(req, req.data, function (err, user1) {
            if (!err && !user1) {
                return next();
            }
            if (user1 && String(user1._id) == req.resourceId) {
                return next();
            }
            res.error(406, 'Email id already exists');
        });
    } else {
        next();
    }
};
