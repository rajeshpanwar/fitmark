var passport = require('passport');
var roles = ['gym_owner', 'fitness_user', 'instructor'];
passport.serializeUser(function (user, done) {
    done(null, user);
});

passport.deserializeUser(function (obj, done) {
    done(null, obj);
});
var filterUserData = function (user) {
    // language and currency
    var userData = {};
    userData.isLoggedIn = true;
    userData._id = String(user._id);
    userData.first_name = user.first_name;
    userData.last_name = user.last_name;
    userData.email = user.email;
    userData.phone = user.phone;
    userData.gender = user.gender;
    userData.address = user.address;
    userData.name = user.name;
    userData.role = user.role;
    userData.image = (user.image && user.image.data) ? user.image.data : null;
    userData.facebook_id = user.facebook_id;
    userData.description = user.description;
    userData.payout_method = user.payout_method;
    userData.created_on = user.created_on;
    userData.updated_on = user.updated_on;
    userData.available_roles = user.roles;
    userData.schedule = user.schedule;
    userData.cost = user.cost_per_session;
    userData.verified = user.verified;
    for (var key in userData) {
        if (!userData[key]) {
            delete userData[key];
        }
    }
    return userData;
};
var handleProviderCallback = function (req, res, next) {
    var key = 'facebook' + "_" + req.provider.settings.api_key;
    passport.authenticate(key, function (err, user) {
        if (err) {
            var output = "<script>if(window.opener)  {window.close(); }</script>";
            return res.send(output);
        }
        if (user) {
            req.session.user = filterUserData(user);
        }
        var output = "<script>if(window.opener)  { window.opener.afterLogin(); window.close(); }</script>";
        res.send(output);
    })(req, res, next);
};

var containAccount = function (accounts, accountName) {
    var contain = false;
    for (var i = 0; i < accounts.length; i++) {
        if (accounts[i].type == accountName) {
            contain = true;
            break;
        }
    }
    return contain;
};

var strategyCallback = function (req, profile, done) {
    req.db.collection("nv.users").findOne({email: profile.userEmail}, function (err, user) {
        if (err) throw err;
        var userData = {
            type: req.params.provider,
            id: profile.id,
            data: profile._json
        };
        if (user) {
            if (!user.account) {
                user.account = [];
            }
            user['role'] = 'fitness_user';
            if (req.query && req.query.role) {
                user['role'] = req.query.role;
            }
            if (roles.indexOf(user['role']) == -1) {
                throw new Error('Invalid role');
            }
            var contain = containAccount(user.account, 'facebook');
            if (contain) {
                return done(null, user);
            }
            user.account.push(userData);
            if (profile.msImageUrl) {
                user.image = {
                    uploadType: "url",
                    data: profile.msImageUrl
                }
            }
            user.verified = "1";
            user.roles = ['fitness_user', 'instructor'];
            var request = {
                entityName: 'nv.users',
                resourceId: String(user._id),
                data: user
            };
            req.app.update(request, function (err, response) {
                if (err) throw err;
                user._id = response.data.data._id;
                done(null, user);
            });
        } else {
            var user = {
                account: []
            };
            if (profile.name) {
                user.first_name = profile.name.givenName;
                user.last_name = profile.name.familyName;
            }

            user.email = profile.userEmail.toLowerCase();
            user.verified = "1";
            user.gender = profile.gender;
            user.password = '123abcd123';
            user.active = "1";
            user['role'] = 'fitness_user';
            if (req.query && req.query.role) {
                user['role'] = req.query.role;
            }
            if (roles.indexOf(user['role']) == -1) {
                throw new Error('Invalid role');
            }
            if (profile.msImageUrl) {
                user.image = {
                    uploadType: "url",
                    data: profile.msImageUrl
                }
            }
            user.account.push(userData);
            var request = {
                entityName: 'nv.users',
                data: user
            };
            req.app.add(request, function (err, response) {
                if (err) throw err;
                user._id = response.data._id;
                console.log('=============user=====12132312===========', user);
                done(null, user);
            });
        }
    })
};
var getLoginProvider = function (req, res, next) {
    req.db.collection('nv.login_provider').findOne({login_provider: 'facebook'}, function (err, loginProvider) {
        if (!loginProvider) {
            req.provider = {
                settings: {
                    api_key: '1722113154700190',
                    api_secret: '28debe3343f547a33f90fb9e482d4bbc'
                }
            };
            return next();
        }
        if (!req.provider) {
            req.provider = {};
        }
        req.provider.settings = {
            api_key: loginProvider.api_key,
            api_secret: loginProvider.api_secret
        };
        next();
    });
};

var checkStrategy = function (req, res, next) {
    var FacebookStrategy = require('passport-facebook').Strategy;
    var key = 'facebook' + "_" + req.provider.settings.api_key;
    var host = require('nv-utils').getHost(req.headers);
    var role = 'fitness_user';
    if (req.query && req.query.role) {
        role = req.query.role;
    }
    if (roles.indexOf(role) == -1) {
        res.status(406);
        return res.send('Invalid role');
    }
    passport.use(key, new FacebookStrategy({
            clientID: req.provider.settings.api_key,
            clientSecret: req.provider.settings.api_secret,
            callbackURL: host + "/auth/facebook/callback?role=" + role,
            profileFields: ['id', 'displayName', 'profileUrl', 'name', 'gender', 'birthday', 'photos', 'emails'],
            passReqToCallback: true
        },
        function (req, accessToken, refreshToken, profile, done) {
            if (!(profile && profile.emails && profile.emails.length && profile.emails[0].value)) {
                return done(null, null);
            }
            profile.userEmail = profile.emails[0].value;
            profile.msImageUrl = 'http://graph.facebook.com/' + profile.id + '/picture?type=large';
            strategyCallback(req, profile, done);
        }
    ));
    next();
};

var handleProviderReq = function (req, res, next) {
    console.log("handleProviderReq called");
    var key = 'facebook' + "_" + req.provider.settings.api_key;
    passport.authenticate(key, {scope: ['email']})(req, res, next);
};

module.exports = function (parent) {
    parent.get('/auth/facebook', getLoginProvider, checkStrategy, handleProviderReq);
    parent.get('/auth/facebook/callback', getLoginProvider, checkStrategy, handleProviderCallback);
};