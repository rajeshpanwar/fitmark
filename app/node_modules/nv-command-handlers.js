var ObjectID = require('mongodb').ObjectID;
var filterUserData = function (user) {
    var userData = {};
    userData._id = String(user._id);
    userData.first_name = user.first_name;
    userData.last_name = user.last_name;
    userData.email = user.email;
    userData.phone = user.phone;
    userData.gender = user.gender;
    userData.address = user.address;
    userData.name = user.name;
    userData.role = user.role;
    userData.image = (user.image && user.image.data) ? user.image.data : null;
    userData.facebook_id = user.facebook_id;
    userData.description = user.description;
    userData.payout_method = user.payout_method;
    userData.created_on = user.created_on;
    userData.updated_on = user.updated_on;
    userData.available_roles = user.roles;
    userData.schedule = user.schedule;
    userData.cost = user.cost_per_session;
    userData.verified = user.verified;
    for (var key in user) {
        if (!userData[key]) {
            if (key != "roles") {
                userData[key] = user[key];
            }
        }
    }
    return userData;
};
var commands = {
    listRecords: function (req, res, next) {
        listRecords(req, req.query, function (records) {
            res.send(200, records);
        });
    },
    getRecords: function (req, res, next) {
        getRecords(req, req.resourceId, function (err, result) {
            if (err) {
                return res.error(404, err)
            }
            res.send(200, result);
        })
    },
    insertRecord: function (req, res, next) {
        insertRecord(req, function (err, result) {
            if (err) {
                return res.error(404, err);
            }
            res.send(200, result);
        })
    },
    updateRecord: function (req, res, next) {
        updateRecord(req, req.resourceId, function (err, result) {
            if (err) {
                return res.error(404, err);
            }
            res.send(200, result);
        })
    },
    deleteRecord: function (req, res, next) {
        deleteRecord(req, req.resourceId, function (err, result) {
            if (err) {
                return res.error(404, err);
            }
            res.send(200, result);
        })
    }
};
var command2 = {
    'list': commands.listRecords,
    'get': commands.getRecords,
    'add': commands.insertRecord,
    'edit': commands.updateRecord,
    'delete': commands.deleteRecord
};


var listRecords = function (req, query, next) {
    var limit = 50;
    var start = 0;
    var filters = {};
    var sortColumns = {};
    if (query.start) {
        if (parseInt(query.start) > 0) {
            start = parseInt(query.start);
        }
    }
    if (query.limit) {
        limit = parseInt(query.limit);
        if (limit > 500) limit = 500;
    }
    var evalExpression = function (value) {
        if (value && typeof value == 'string' && value.indexOf('TIMESTAMP') > -1) {
            var TIMESTAMP = new Date().getTime();
            return eval(value);
        }
        return value;
    };
    var parsedFilterValue = function (filter) {
        var value = '';
        if (filter.field == 'created_on' || filter.field == 'updated_on') {
            filter.value = new Date(filter.value);

        }
        switch (filter.operator) {
            case 'equal':
                if (typeof filter.value == "string" && false) {
                    value = {$regex: "^" + filter.value + "$", $options: 'i'};
                } else {
                    value = filter.value;
                }
                break;
            case 'less_than':
                value = {$lt: (filter.field == 'created_on' || filter.field == "updated_on" ? filter.value : parseFloat(evalExpression(filter.value)))};
                break;
            case 'less_than_or_equal':
                value = {$lte: (filter.field == 'created_on' || filter.field == "updated_on" ? filter.value : parseFloat(evalExpression(filter.value)))};
                break;
            case 'greater_than' :
                value = {$gt: (filter.field == 'created_on' || filter.field == "updated_on" ? filter.value : parseFloat(evalExpression(filter.value)))};
                break;
            case 'greater_than_or_equal':
                value = {$gte: (filter.field == 'created_on' || filter.field == "updated_on" ? filter.value : parseFloat(evalExpression(filter.value)))};
                break;
            case 'not_equal':
                value = {$ne: filter.value};
                break;
            case 'in' :
                if (filter.field == "_id" && filter.value && filter.value instanceof Array) {
                    var values = [];
                    filter.value.forEach(function (value) {
                        values.push(ObjectID(value));
                    });
                    filter.value = values;
                }
                if (!Array.isArray(filter.value)) {
                    return next({error: '$in needs an array'});
                }
                value = {$in: filter.value};
                break;
            case 'elemMatch' :
                value = {$elemMatch: filter.value};
                break;
            case 'regex' :
                value = {$regex: '.*' + filter.value + '.*', $options: 'i'};
                break;
            default:
                value = filter.value;
        }
        return value;
    };
    if (query.filters) {
        query.filters.forEach(function (filter) {
            if (typeof filter == 'string') {
                filter = JSON.parse(filter);
            }
            if (filter.field && filter.field != '') {
                var parsedValue = parsedFilterValue(filter);
                filters[filter.field] = parsedValue;
            }
        })
    }
    if (query.search) {
        var search = {$search: query.search};
        filters['$text'] = search;
    }
    req.db.collection(req.entityName).find(filters).sort({_id: -1}).skip(start).limit(limit).toArray(function (err, result) {
        next({records: result});
    })
};

var getRecords = function (req, resourceId, next) {
    if (!resourceId) {
        return next('Resource ID is not present');
    }
    var role = null;
    var roles = ['gym_owner', 'fitness_user', 'instructor'];
    if (req.query && req.query.role) {
        if (roles.indexOf(req.query.role) > -1) {
            role = req.query.role;
        }
    }
    var id = null;
    try {
        id = ObjectID(resourceId);
    } catch (e) {
        id = resourceId;
    }
    req.db.collection(req.entityName).findOne({_id: id}, function (err, result) {
        if (err) {
            return next(err, null);
        }
        if (!result) {
            return next('Record not Found', null);
        }
        if (req.entityName == 'nv.users') {
            var user = filterUserData(result);
            if (req.session.user && req.session.user.isLoggedIn) {
                if (String(req.session.user._id) == String(resourceId)) {
                    user.role = req.session.user.role;
                    user['isLoggedIn'] = true;
                    req.session.user = user;
                }
            }
            if (role) {
                if (!result.roles) {
                    result.roles = [];
                }
                if (result.role == role || result.roles.indexOf(role) > -1)
                    user.role = role;
            }
            return next(null, user);
        }
        next(null, result)
    })
};

var insertRecord = function (req, next) {
    if (!req.data) {
        return next('Data Not Found', null);
    }
    req.data['_id'] = ObjectID();
    req.data['created_on'] = new Date();
    req.db.collection(req.entityName).insert(req.data, function (err, result) {
        if (err) {
            return next(err, null);
        }
        next(null, result[0]);
    })
};

var updateRecord = function (req, resourceId, next) {
    if (!resourceId) {
        return next('Resource Id is required', null);
    }
    if (!req.data) {
        return next('Data is required', null);
    }
    var id = null;
    try {
        id = ObjectID(resourceId);
    } catch (e) {
        id = resourceId;
    }
    delete req.data._id;
    req.data['updated_on'] = new Date();
    req.db.collection(req.entityName).update({_id: id}, {$set: req.data}, function (err, result) {
        if (err) {
            return next(err, null);
        }
        req.db.collection(req.entityName).findOne({_id: id}, function (err, result) {
            if (err || !result) {
                return next('Something Went Wrong', null);
            }
            if (req.entityName == 'nv.users') {
                var user = filterUserData(result);
                if (req.session.user && req.session.user.isLoggedIn) {
                    user.role = req.session.user.role;
                    user['isLoggedIn'] = true;
                    req.session.user = user;
                }
                return next(null, {data: user});
            }
            next(null, {data: result});
        });
    });
};

var deleteRecord = function (req, resourceId, next) {
    if (!resourceId) {
        return next('Resource Id is required', null);
    }
    var id = null;
    try {
        id = ObjectID(resourceId);
    } catch (e) {
        id = resourceId;
    }
    req.db.collection(req.entityName).remove({_id: id}, function (err, result) {
        if (err) {
            return next(err, null);
        }
        next(null, 'Update Successfully');
    })
};

module.exports = command2;