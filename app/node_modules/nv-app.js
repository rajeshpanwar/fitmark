var trycatch = require('trycatch');
var hooks = require('nv-hooks');
var utils = require('nv-utils');
exports.createAppFromRequest = function (req, res) {
    var app = new Application();
    app.db = req.db;                  //todo: to be remove
    app.session = req.session;       //todo: to be remove
    app.headers = req.headers;
    app.url = req.url;
    app.setHeader = function (key, value) {
        res.setHeader(key, value);
    };
    app.end = function (key, value) {
        res.end(key, value);
    };
    app.files = req.files;
    return app;
};

exports.createAppForTestCase = function (next) {
    var app = new Application();
    require('nv-config').loadConfigs();
    var MongoClient = require('mongodb').MongoClient;
    var nconf = require('nconf');
    var mongo_url = nconf.get('mongoUrl');
    MongoClient.connect(mongo_url, function (err, db) {
        app.db = db;
        app.session = {};
        next(app);
    })
};

var Application = function () {
    var self = this;
    self.call = function (command, request, cb) {
        var executeHooks = request.executeHooks;
        request.command = command;
        var handlers = require('nv-command-handlers');
        if (!request.query) {
            request.query = {};
        }
        request.db = self.db;
        request.session = self.session;
        request.user = self.user;
        request.app = self;
        request.headers = self.headers;
        request.url = self.url;
        request.method = self.method;
        var commandHandler = null;
        commandHandler = handlers[command];
        var commandName = request.command;
        var responseObj = function () {
            var resSelf = this;
            resSelf.status = 200;
            resSelf.data = {};
            resSelf.sent = false;
            resSelf.send = function (status, data) {
                if (typeof status == 'number') {
                    resSelf.status = status;
                    resSelf.data = data;
                } else {
                    resSelf.status = 200;
                    resSelf.data = status;
                }
                if (status >= 200 && status < 300) {
                    resSelf.sent = true;
                    cb(null, {data: resSelf.data, status: resSelf.status});
                }
                else {
                    resSelf.sent = true;
                    cb({data: resSelf.data, status: resSelf.status}, null);
                }

            };
            resSelf.error = function (status, data) {
                resSelf.status = status;
                resSelf.data = data;
                resSelf.sent = true;
                var full_command_name = '';
                cb({
                    data: resSelf.data,
                    status: resSelf.status
                }, null);
            }
        };
        var response = new responseObj();

        function executeCommand() {
            trycatch(function () {
                if (executeHooks) {
                    var full_command_name = 'nv.entity.' + request.entityName + '.' + request.command;
                    hooks.execute(full_command_name + '.pre', request, response, function () {
                        commandHandler.call(module, request, response, function () {
                            hooks.execute(full_command_name + '.post', request, response, function () {
                                response.send(response.status, response.data);
                            })
                        })
                    })
                } else {
                    commandHandler.call(module, request, response, function () {
                        response.send(response.status, response.data);
                    });
                }
            }, function (err) {
                console.log("NV App Error", err, err.stack);
                response.error(406, err);
            });
        }

        if (request.entityName) {
            if (commandHandler) {
                executeCommand();
            } else {
                var commands = require('nv-global_entities_commands').commands;
                if (commands && commands[request.entityName] && commands[request.entityName][command]) {
                    commandHandler = commands[request.entityName][command];
                }
                if (commandHandler) {
                    commandHandler = utils.parseFunction2(commandHandler);
                    executeCommand();
                } else {
                    response.error(404, "command not found");
                }
            }
        } else {
            response.error(404, "EntityName not Specified");
        }

    };

    self.list = function (request, next) {
        self.call('list', request, next);
    };
    self.get = function (request, next) {
        self.call('get', request, next);
    };
    self.add = function (request, next) {
        self.call('add', request, next);
    };
    self.update = function (request, next) {
        self.call('edit', request, next);
    };
    self.del = function (request, next) {
        self.call("delete", request, next);
    }
};