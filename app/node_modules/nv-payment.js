var braintree = require("braintree");
var ObjectID = require('mongodb').ObjectID;
var gateway = braintree.connect({
    environment: braintree.Environment.Sandbox,
    merchantId: "q2zcqn479qdbc7pz",
    publicKey: "4pzkzrvy7b4qbytc",
    privateKey: "52940194946084c94e0ba8732231f1b4"
});

function generateTransaction(req, transaction_request, next) {
    req.db.collection('nv.transactions').insert(transaction_request, function (err, result) {
        next(result[0]._id);
    })
}

function verifyGymClass(req, data1, next) {
    var request = {
        entityName: 'nv.users',
        resourceId: data1.gym_id
    };
    req.app.get(request, function (err, result) {
        if (err || !result.data) {
            return next(false);
        }
        var data = result.data;
        var valid_user = false;
        if (data.role == 'gym_owner') {
            valid_user = true;
        }
        if (valid_user) {
            var date = new Date();
            if (data1.time_zone) {
                var time_zone = data1.time_zone.split(':');
                date.setHours(new Date().getHours() + parseInt(time_zone[0]));
                if (time_zone.length > 1) {
                    if (parseInt(time_zone[0]) < 0) {
                        date.setMinutes(new Date().getMinutes() - 30);
                    } else {
                        date.setMinutes(new Date().getMinutes() + 30);
                    }
                }
            }
            if (!data.schedule || !data.schedule.length) {
                return next(false);
            }
            var valid_date = date.getDay();
            var next_valid_date;
            if (valid_date == 6) {
                next_valid_date = 0
            } else {
                next_valid_date = valid_date + 1
            }
            var valid_gym_register = false;
            data.schedule.forEach(function (sch) {
                if (sch.schedule_day && (sch.schedule_day.indexOf(String(valid_date)) > -1 || sch.schedule_day.indexOf(String(next_valid_date)) > -1)) {
                    valid_gym_register = true;
                }
            });

            if (!valid_gym_register) {
                return next(false);
            }
            var valid_till = new Date(date.setHours(date.getHours() + 24));
            data.valid_till = valid_till;
            next(data);
        } else {
            next(false);
        }
    })
}

function getClassesInfo(req, class_group_id, next) {
    req.db.collection('nv.classes').find({
        class_group_id: String(class_group_id),
        delete: {$exists: false}
    }).toArray(function (err, classes) {
        if (err) {
            throw err;
        }
        if (!classes || !classes.length) {
            return next(false);
        }
        next(classes);
    })
}

function verify(req, registrationFor, body, next) {
    if (registrationFor == 'gym') {
        var data = {
            gym_id: body.gym_id
        };
        verifyGymClass(req, data, function (gym) {
            if (!gym) {
                return next(false);
            } else {
                next(gym.cost);
            }
        })
    } else {
        getClassesInfo(req, body.class_group_id, function (classs) {
            if (!classs) {
                return next(false);
            } else {
                next(classs[0].cost);
            }
        })
    }
}

function getTransation(req, transaction_id, next) {
    req.db.collection('nv.transactions').findOne({_id: ObjectID(transaction_id)}, function (err, result) {
        if (err) throw err;
        next(result);
    })
}

function deleteTransaction(req, transaction_id, next) {
    req.db.collection('nv.transactions').remove({_id: ObjectID(transaction_id)}, function (err, result) {
        if (err) throw err;
        next();
    })
}

exports.payment = function (req, res, next) {
    if (!req.body) {
        res.status(406);
        return res.send('Some went wrong please try again');
    }
    var gym_id = req.body.gym_id;
    var registrationFor = req.params.registrationFor;
    var registration = ['gym', 'class'];
    if (registration.indexOf(registrationFor) == -1) {
        res.status(406);
        return res.send('Some went wrong please try again');
    }
    var transaction_request = {};
    if (registrationFor == 'gym') {
        if (!req.body.gym_id) {
            res.status(406);
            return res.send('Some went wrong please try again');
        }
        transaction_request = {
            gym_id: req.body.gym_id,
            registrationFor: registrationFor,
            user_id: req.session.user._id
        }
    } else {
        if (!req.body.class_id || !req.body.class_group_id) {
            res.status(406);
            return res.send('Some went wrong please try again');
        }
        transaction_request = {
            class_id: req.body.class_id,
            class_group_id: req.body.class_group_id,
            registrationFor: registrationFor,
            user_id: req.session.user._id
        }
    }
    verify(req, registrationFor, req.body, function (cost) {
        if (!cost) {
            res.status(406);
            return res.send('Invalid data found');
        }
        transaction_request['cost'] = cost;
        gateway.clientToken.generate({}, function (err, response) {
            if (err || !response.clientToken) {
                res.status(406);
                return res.send('Some went wrong please try again');
            }
            generateTransaction(req, transaction_request, function (transaction_id) {
                var name = require('nv-utils').getHost(req.headers);
                var path = name + '/handleResponse/' + transaction_id;
                var html = "<html>" +
                    "<body>" +
                    '<script src="https://js.braintreegateway.com/js/braintree-2.24.0.min.js"></script>' +
                    '<script>' +
                    'var clientToken = "' + response.clientToken + '";' +
                    'braintree.setup(clientToken, "dropin", {' +
                    'container: "payment-form"' +
                    '});' +
                    '</script>' +
                    '<script>' +
                    'var form = document.createElement("form");' +
                    'form.setAttribute("method", "post");' +
                    'form.setAttribute("action", "' + path + '");' +
                    'var div = document.createElement("div");' +
                    'div.setAttribute("id", "payment-form");' +
                    'form.appendChild(div);' +
                    'var hiddenField = document.createElement("input");\n' +
                    'hiddenField.setAttribute("type", "submit");\n' +
                    'hiddenField.setAttribute("value", "pay $' + cost + '");\n' +
                    'form.appendChild(hiddenField);\n' +
                    'document.body.appendChild(form);' +
                    '</script>' +
                    "</body>" +
                    "</html>";
                res.status(200);
                res.send(html);
            })
        });
    })
};

exports.generateToken = function (req, res, next) {
    gateway.clientToken.generate({}, function (err, response) {
        if (err || !response.clientToken) {
            res.status(406);
            return res.send('Some went wrong please try again');
        }
        res.send(200, {data: response.clientToken});
    })
}

exports.handleResponse = function (req, res, next) {
    if (!req.body || !req.body.payment_method_nonce) {
        res.status(406);
        return res.send("<html><body> Some Went Wrong. Please contact Fitmark </body></html>");
    }
    getTransation(req, req.params.txn_id, function (transaction) {
        if (!transaction) {
            res.status(406);
            return res.send("<html><body> Some Went Wrong. Please contact Fitmark </body></html>");
        }
        if (transaction.registrationFor == 'gym') {
            var request = {
                entityName: 'nv.classes',
                data: {
                    gym_id: transaction.gym_id,
                    user_id: req.session.user._id,
                    payment_method_nonce: req.body.payment_method_nonce
                }
            };
            req.app.call('gym_register', request, function (err, result) {
                if (err || !result.data || !result.data.data) {
                    res.status(406);
                    return res.send("<html><body> Some Went Wrong. Please contact Fitmark </body></html>");
                } else {
                    var data = result.data.data;
                    if (data.indexOf('Error') > -1) {
                        var error = data.split('#');
                        res.status(406);
                        return res.send("<html><body> " + error[1] + " </body></html>");
                    } else {
                        deleteTransaction(req, req.params.txn_id, function () {
                            res.status(406);
                            return res.send("<html><body> Successfully Booked </body></html>");
                        })
                    }
                }
            })
        } else {
            var request = {
                entityName: 'nv.classes',
                data: {
                    class_id: transaction.class_id,
                    class_group_id: transaction.class_group_id,
                    user_id: req.session.user._id,
                    payment_method_nonce: req.body.payment_method_nonce
                }
            };
            req.app.call('bookClass', request, function (err, result) {
                if (err || !result.data || !result.data.data) {
                    res.status(406);
                    return res.send("<html><body> Some Went Wrong. Please contact Fitmark </body></html>");
                } else {
                    var data = result.data.data;
                    if (data.indexOf('Error') > -1) {
                        var error = data.split('#');
                        res.status(406);
                        return res.send("<html><body> " + error[1] + " </body></html>");
                    } else {
                        deleteTransaction(req, req.params.txn_id, function () {
                            res.status(406);
                            return res.send("<html><body> Successfully Booked </body></html>");
                        })
                    }
                }
            })
        }
    })
};